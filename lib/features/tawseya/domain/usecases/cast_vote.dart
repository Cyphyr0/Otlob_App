import '../entities/tawseya_item.dart';
import '../entities/vote.dart';
import '../entities/voting_period.dart';
import '../repositories/tawseya_repository.dart';

class CastVote {
  final TawseyaRepository repository;

  const CastVote(this.repository);

  Future<Vote> call({
    required String userId,
    required TawseyaItem tawseyaItem,
    required VotingPeriod votingPeriod,
    String? comment,
  }) async {
    // Validate that user hasn't already voted in this period
    final existingVote = await repository.getUserVoteForPeriod(
      userId: userId,
      votingPeriodId: votingPeriod.id,
    );

    if (existingVote != null) {
      throw VoteAlreadyExistsException(
        'User has already voted in period ${votingPeriod.displayName}',
      );
    }

    // Validate that voting period is active
    if (!votingPeriod.isCurrentPeriod) {
      throw InvalidVotingPeriodException(
        'Voting period ${votingPeriod.displayName} is not active',
      );
    }

    // Validate that tawseya item is available for voting
    if (!tawseyaItem.canVote) {
      throw TawseyaItemNotAvailableException(
        'Tawseya item "${tawseyaItem.name}" is not available for voting',
      );
    }

    // Create the vote
    final vote = Vote(
      id: '', // Will be generated by repository
      userId: userId,
      tawseyaItemId: tawseyaItem.id,
      votingPeriodId: votingPeriod.id,
      createdAt: DateTime.now(),
      comment: comment,
    );

    return repository.castVote(vote);
  }
}

class VoteAlreadyExistsException implements Exception {
  final String message;
  const VoteAlreadyExistsException(this.message);
}

class InvalidVotingPeriodException implements Exception {
  final String message;
  const InvalidVotingPeriodException(this.message);
}

class TawseyaItemNotAvailableException implements Exception {
  final String message;
  const TawseyaItemNotAvailableException(this.message);
}